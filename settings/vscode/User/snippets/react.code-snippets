{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  "React Functional Component": {
    "prefix": "rfc",
    "body": [
    "type ${1:name}Props = {}",
    "",
    "export default function ${1:name} (props: ${1:name}Props) {",
    "  return (",
    "    <div>",
    "      $2",
    "    </div>",
    "  )",
    "};",
    ""
    ],
    "description": "React Functional Component"
  },
  "NextJS server side page": {
    "prefix": "nextjs",
    "body": [
    "import { graphql } from \"@/gql\";",
    "import useSWR, { SWRConfig } from \"swr\";",
    "import PageWrapper from \"@/components/server-components/PageWrapper\";",
    "import { Text } from \"@chakra-ui/react\";",
    "import graphqlClient from \"@/graphql-client\";",
    "import { ${1:name}Query } from \"@/gql/graphql\";",
    "import { useRouter } from \"next/router\";",
    "import { serverRequest } from \"@/pages/api/graphql\";",
    "import { GetStaticPropsContext } from \"next\";",
    "import LoadingIndicator from \"@/components/general/LoadingIndicator\";",
    "",
    "const ${1:name}_Query = graphql(`",
    "\tquery ${1:name}($id: ID!) {",
    "\t",
    "\t}",
    "`);",
    "",
    "function ${1:name}Content() {",
    "  const router = useRouter();",
    "  const id = router.query.id as string;",
    "",
    "  const { data } = useSWR<${1:name}Query>(`MODIFY_THIS_KEY`, () =>",
    "    graphqlClient.request(${1:name}_Query, { id })",
    "  );",
    "",
    "  if (!data) return <LoadingIndicator />;",
    "",
    "  return (",
    "    <PageWrapper>",
    "      <Text as=\"h1\">Terve</Text>",
    "    </PageWrapper>",
    "  );",
    "}",
    "",
    "type ${1:name}Props = {",
    "  data: ${1:name}Query;",
    "};",
    "",
    "export default function ${1:name}({ data }: ${1:name}Props) {",
    "  return (",
    "    <SWRConfig value={{ fallback: data }}>",
    "      <${1:name}Content />",
    "    </SWRConfig>",
    "  );",
    "}",
    "",    
    "export async function getStaticPaths() {",
    "  return {",
    "    paths: [],",
    "    fallback: \"blocking\",",
    "  };",
    "}",
     "",
    "export async function getStaticProps({",
    "  params,",
    "}: GetStaticPropsContext<{ id: string }>) {",
    "  if (!params) throw new Error(\"Unexpected error, no params\");",
    "  const data = await serverRequest(${1:name}_Query, {",
    "    id: params.id,",
    "  });",
    "",
    "  // Pass data to the page via props",
    "  return { props: { data } };",
    "}",
    "",
    ],
    "description": "React Functional Component"
  }
}